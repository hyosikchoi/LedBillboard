Index: features/src/main/java/com/hyosik/features/ui/portrait/PortraitScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.hyosik.features.ui.portrait\r\n\r\nimport androidx.compose.animation.core.LinearEasing\r\nimport androidx.compose.animation.core.RepeatMode\r\nimport androidx.compose.animation.core.animateFloat\r\nimport androidx.compose.animation.core.infiniteRepeatable\r\nimport androidx.compose.animation.core.rememberInfiniteTransition\r\nimport androidx.compose.animation.core.tween\r\nimport androidx.compose.foundation.ScrollState\r\nimport androidx.compose.foundation.horizontalScroll\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.material3.Button\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.OutlinedTextField\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.graphicsLayer\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport com.github.skydoves.colorpicker.compose.ColorEnvelope\r\nimport com.github.skydoves.colorpicker.compose.HsvColorPicker\r\nimport com.github.skydoves.colorpicker.compose.rememberColorPickerController\r\nimport com.hyosik.core.ui.state.UiState\r\nimport com.hyosik.model.BILLBOARD_KEY\r\nimport com.hyosik.model.Billboard\r\nimport com.hyosik.model.Direction\r\nimport com.hyosik.features.extension.orZero\r\nimport com.hyosik.features.ui.component.BillBoard\r\nimport com.hyosik.features.ui.intent.MainEffect\r\nimport com.hyosik.features.ui.intent.MainEvent\r\nimport com.hyosik.features.ui.intent.MainState\r\nimport com.hyosik.features.ui.theme.buttonText\r\nimport com.hyosik.utils.getColor\r\n\r\n\r\n@Composable\r\nfun PotraitScreen(\r\n    mainState: UiState<MainState>,\r\n    requestOrientationProvider: () -> Unit,\r\n    onColorChanged: (ColorEnvelope) -> Unit,\r\n    onEvent: (MainEvent) -> Unit,\r\n    onSideEffect: (MainEffect) -> Unit\r\n) {\r\n\r\n    val controller = rememberColorPickerController()\r\n\r\n    val infiniteTransition = rememberInfiniteTransition()\r\n\r\n    val maxChar: Int = 30\r\n\r\n    val minFontSize: Int = 60\r\n\r\n    val maxFontSize: Int = 140\r\n\r\n    /** scroll 값은 지속적으로 변하므로 리컴포지션 조심! */\r\n    val scroll by infiniteTransition.animateFloat(\r\n        initialValue = 1f,\r\n        targetValue = -1f,\r\n        animationSpec = infiniteRepeatable(\r\n            animation = tween(10000, easing = LinearEasing),\r\n            repeatMode = RepeatMode.Restart,\r\n        ), label = \"\"\r\n    )\r\n\r\n    Column(\r\n        modifier = Modifier.fillMaxSize(),\r\n        horizontalAlignment = Alignment.CenterHorizontally\r\n    ) {\r\n        if(mainState.isSuccess) {\r\n            Column(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .height(250.dp)\r\n            ) {\r\n                BillBoard(\r\n                    text = mainState.data?.billboard?.description.orEmpty(), fontSize = mainState.data?.billboard?.fontSize.orZero(),\r\n                    textWidth = { textWidth ->\r\n                        onEvent(MainEvent.SetTextWidth(textWidth = textWidth))\r\n                    },\r\n                    textColor = mainState.data?.billboard?.textColor ?: \"FFFFFF\",\r\n                    dynamicModifier = getModifier(\r\n                        direction = mainState.data!!.billboard.direction,\r\n                        billboardTextWidth = mainState.data!!.billboard.billboardTextWidth,\r\n                        scrollProvider = { scroll }\r\n                    )\r\n                )\r\n            }\r\n\r\n            OutlinedTextField(\r\n                value = mainState.data?.billboard?.description.orEmpty(),\r\n                onValueChange = { newText ->\r\n                    if (newText.length <= maxChar) {\r\n                        mainState.data?.billboard?.let {\r\n                            onEvent(MainEvent.Save(it.copy(\r\n                                key = BILLBOARD_KEY,\r\n                                description = newText,\r\n                            )))\r\n                        }\r\n                    } else {\r\n                        onSideEffect(MainEffect.Toast(\"최대 길이 입니다!\"))\r\n                    }\r\n                },\r\n                modifier = Modifier.fillMaxWidth(),\r\n                maxLines = 1,\r\n                singleLine = true,\r\n                textStyle = MaterialTheme.typography.buttonText\r\n            )\r\n            Row(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .height(100.dp),\r\n                horizontalArrangement = Arrangement.SpaceEvenly,\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                Button(onClick = {\r\n                    if (mainState.data?.billboard?.fontSize.orZero() <= maxFontSize) {\r\n                        mainState.data?.billboard?.let {\r\n                            onEvent(MainEvent.Save(\r\n                                it.copy(\r\n                                    fontSize = it.fontSize + 2\r\n                                )\r\n                            ))\r\n                        }\r\n                    }\r\n                    else onSideEffect(MainEffect.Toast(\"최대 사이즈 입니다!\"))\r\n                }) {\r\n                    Text(text = \"+\", textAlign = TextAlign.Center, fontSize = 25.sp)\r\n                }\r\n\r\n                Button(onClick = {\r\n                    requestOrientationProvider()\r\n                }) {\r\n                    Text(text = \"START\", textAlign = TextAlign.Center, fontSize = 25.sp)\r\n                }\r\n\r\n                Button(onClick = {\r\n                    if (mainState.data?.billboard?.fontSize.orZero() >= minFontSize){\r\n                        mainState.data?.billboard?.let {\r\n                            onEvent(MainEvent.Save(\r\n                                it.copy(\r\n                                    fontSize = it.fontSize - 2\r\n                                )\r\n                            ))\r\n                        }\r\n\r\n                    }\r\n                    else onSideEffect(MainEffect.Toast(\"최소 사이즈 입니다!\"))\r\n                }) {\r\n                    Text(text = \"-\", textAlign = TextAlign.Center, fontSize = 25.sp)\r\n                }\r\n            }\r\n\r\n            Row(\r\n                modifier = Modifier\r\n                    .fillMaxWidth()\r\n                    .height(100.dp),\r\n                horizontalArrangement = Arrangement.SpaceEvenly,\r\n                verticalAlignment = Alignment.CenterVertically\r\n            ) {\r\n                Button(onClick = {\r\n                    mainState.data?.billboard?.let {\r\n                        onEvent(MainEvent.Save(\r\n                            it.copy(\r\n                                direction = Direction.LEFT\r\n                            )\r\n                        ))\r\n                    }\r\n\r\n                }) {\r\n                    Text(text = \"←\", textAlign = TextAlign.Center, fontSize = 25.sp)\r\n                }\r\n                Button(onClick = {\r\n                    mainState.data?.billboard?.let {\r\n                        onEvent(\r\n                            MainEvent.Save(\r\n                                it.copy(\r\n                                    direction = Direction.STOP\r\n                                )\r\n                            )\r\n                        )\r\n                    }\r\n                }) {\r\n                    Text(text = \"STOP\", textAlign = TextAlign.Center, fontSize = 25.sp)\r\n                }\r\n                Button(onClick = {\r\n                    mainState.data?.billboard?.let {\r\n                        onEvent(MainEvent.Save(\r\n                            it.copy(\r\n                                direction = Direction.RIGHT\r\n                            )\r\n                        ))\r\n                    }\r\n                }) {\r\n                    Text(text = \"→\", textAlign = TextAlign.Center, fontSize = 25.sp)\r\n                }\r\n            }\r\n\r\n            HsvColorPicker(\r\n                modifier = Modifier\r\n                    .size(220.dp)\r\n                    .aspectRatio(1f / 1f),\r\n                controller = controller,\r\n                onColorChanged = { colorEnvelope: ColorEnvelope ->\r\n                   onColorChanged(colorEnvelope)\r\n                },\r\n                initialColor = if(mainState.data?.billboard?.textColor != null) mainState.data?.billboard?.textColor?.getColor() else null\r\n            )\r\n\r\n            //TODO 구글 애드몹 광고 넣기\r\n\r\n        }\r\n    }\r\n}\r\n\r\nprivate fun getModifier(\r\n    direction: Direction,\r\n    billboardTextWidth: Int,\r\n    scrollProvider: () -> Float\r\n): Modifier = when (direction) {\r\n    Direction.LEFT -> {\r\n        Modifier\r\n            .fillMaxWidth()\r\n            .horizontalScroll(state = ScrollState(0), enabled = false)\r\n            .graphicsLayer {\r\n                translationX = billboardTextWidth * scrollProvider()\r\n                translationY = 0f\r\n            }\r\n\r\n\r\n    }\r\n\r\n    Direction.STOP -> {\r\n        Modifier\r\n            .fillMaxWidth()\r\n            .horizontalScroll(state = ScrollState(0), enabled = true)\r\n    }\r\n\r\n    Direction.RIGHT -> {\r\n        Modifier\r\n            .fillMaxWidth()\r\n            .horizontalScroll(state = ScrollState(0), enabled = false)\r\n            .graphicsLayer {\r\n                translationX = -billboardTextWidth * scrollProvider()\r\n                translationY = 0f\r\n            }\r\n    }\r\n}\r\n\r\n\r\n@Preview\r\n@Composable\r\nfun PotraitScreenPreview() {\r\n    PotraitScreen(\r\n        mainState = UiState<MainState>(\r\n            data = MainState(\r\n                billboard = Billboard()\r\n            )\r\n        ),\r\n        requestOrientationProvider =  {},\r\n        onColorChanged= {},\r\n        onEvent = {},\r\n        onSideEffect = {}\r\n    )\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/features/src/main/java/com/hyosik/features/ui/portrait/PortraitScreen.kt b/features/src/main/java/com/hyosik/features/ui/portrait/PortraitScreen.kt
--- a/features/src/main/java/com/hyosik/features/ui/portrait/PortraitScreen.kt	(revision b61f9067691f0f2e7c9cc514282d07dcea8146fd)
+++ b/features/src/main/java/com/hyosik/features/ui/portrait/PortraitScreen.kt	(date 1736428492960)
@@ -1,5 +1,6 @@
 package com.hyosik.features.ui.portrait
 
+import android.util.Log
 import androidx.compose.animation.core.LinearEasing
 import androidx.compose.animation.core.RepeatMode
 import androidx.compose.animation.core.animateFloat
@@ -14,7 +15,11 @@
 import androidx.compose.material3.OutlinedTextField
 import androidx.compose.material3.Text
 import androidx.compose.runtime.Composable
+import androidx.compose.runtime.LaunchedEffect
 import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableIntStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.setValue
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.graphics.graphicsLayer
@@ -36,6 +41,7 @@
 import com.hyosik.features.ui.intent.MainState
 import com.hyosik.features.ui.theme.buttonText
 import com.hyosik.utils.getColor
+import kotlinx.coroutines.delay
 
 
 @Composable
@@ -57,6 +63,21 @@
 
     val maxFontSize: Int = 140
 
+    var count by remember { mutableIntStateOf(0) }
+
+    LaunchedEffect(Unit) {
+        while (true) {
+            delay(1000)
+            onEvent(MainEvent.Edit(
+                Billboard(
+                key = BILLBOARD_KEY,
+                description = count.toString()
+            )))
+            count++
+        }
+
+    }
+
     /** scroll 값은 지속적으로 변하므로 리컴포지션 조심! */
     val scroll by infiniteTransition.animateFloat(
         initialValue = 1f,
Index: features/src/main/java/com/hyosik/features/ui/viewmodel/MainViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.hyosik.features.ui.viewmodel\r\n\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.hyosik.core.ui.state.UiState\r\nimport com.hyosik.domain.usecase.GetBillboardUseCase\r\nimport com.hyosik.domain.usecase.PostBillboardUseCase\r\nimport com.hyosik.model.BILLBOARD_KEY\r\nimport com.hyosik.model.Billboard\r\nimport com.hyosik.features.ui.intent.MainEffect\r\nimport com.hyosik.features.ui.intent.MainEvent\r\nimport com.hyosik.features.ui.intent.MainState\r\nimport dagger.hilt.android.lifecycle.HiltViewModel\r\nimport kotlinx.coroutines.channels.Channel\r\nimport kotlinx.coroutines.flow.MutableSharedFlow\r\nimport kotlinx.coroutines.flow.SharedFlow\r\nimport kotlinx.coroutines.flow.SharingStarted\r\nimport kotlinx.coroutines.flow.StateFlow\r\nimport kotlinx.coroutines.flow.asSharedFlow\r\nimport kotlinx.coroutines.flow.onStart\r\nimport kotlinx.coroutines.flow.receiveAsFlow\r\nimport kotlinx.coroutines.flow.runningFold\r\nimport kotlinx.coroutines.flow.stateIn\r\nimport kotlinx.coroutines.flow.take\r\nimport kotlinx.coroutines.launch\r\nimport javax.inject.Inject\r\n\r\n@HiltViewModel\r\nclass MainViewModel @Inject constructor(\r\n    private val getBillboardUseCase: GetBillboardUseCase,\r\n    private val postBillboardUseCase: PostBillboardUseCase,\r\n) : ViewModel() {\r\n\r\n    private val events = Channel<MainEvent>()\r\n    //TODO presentation 모듈도 features 모듈로 변경하고 화면 별로 모듈을 나눈다.\r\n    // theme 도 모듈로 나눈다.\r\n    val state: StateFlow<UiState<MainState>> = events.receiveAsFlow()\r\n        .onStart { getSaveBillboard() }\r\n        .runningFold(\r\n            initial = UiState<MainState>(\r\n                data = MainState(\r\n                    billboard = Billboard()\r\n                )\r\n            ),\r\n            operation = ::reduceState\r\n        )\r\n        .stateIn(\r\n            scope = viewModelScope,\r\n            started = SharingStarted.Eagerly,\r\n            initialValue = UiState<MainState>(\r\n                data =  MainState (\r\n                billboard = Billboard()\r\n            ))\r\n        )\r\n\r\n    private val _sideEffects: MutableSharedFlow<MainEffect> = MutableSharedFlow()\r\n\r\n    val sideEffects: SharedFlow<MainEffect> = _sideEffects.asSharedFlow()\r\n\r\n    private fun reduceState(current: UiState<MainState>, event: MainEvent): UiState<MainState> {\r\n        return when (event) {\r\n            is MainEvent.Initial -> {\r\n                UiState.success(current.data?.copy(isInitialText = true, billboard = event.billboard) as MainState)\r\n            }\r\n\r\n            is MainEvent.Edit -> {\r\n                UiState.success(current.data?.copy(billboard = event.billboard) as MainState)\r\n            }\r\n\r\n            is MainEvent.Save -> {\r\n                viewModelScope.launch { postBillboardUseCase(billboard = event.billboard) }\r\n                UiState.success(current.data?.copy(billboard = event.billboard) as MainState)\r\n            }\r\n\r\n            is MainEvent.SetTextWidth -> {\r\n                UiState.success(current.data?.copy(billboard = current.data?.billboard?.copy(billboardTextWidth = event.textWidth) as Billboard) as MainState)\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun getSaveBillboard() = viewModelScope.launch {\r\n        getBillboardUseCase(BILLBOARD_KEY)\r\n            // take 를 이용하여 처음 datastore 에 저장되어 있던 값만 수집하고 스트림을 종료시킨다.\r\n            // (이렇게 안하면 TextField 에서 수정해서 저장할 때마다 해당 스트림을 통해 이벤트를 발생 시키기 때문이다!)\r\n            .take(count = 1)\r\n            .collect { billboard ->\r\n                events.send(MainEvent.Initial(billboard = billboard))\r\n            }\r\n    }\r\n\r\n    fun onEvent(event: MainEvent) = viewModelScope.launch {\r\n        events.send(event)\r\n    }\r\n\r\n    fun saveBillboard(billboard: Billboard) = viewModelScope.launch {\r\n        events.send(MainEvent.Edit(billboard = billboard))\r\n        postBillboardUseCase(billboard = billboard)\r\n    }\r\n\r\n    fun setTextWidth(textWidth: Int) = viewModelScope.launch {\r\n        events.send(MainEvent.Edit(state.value.data?.billboard?.copy(billboardTextWidth = textWidth) as Billboard))\r\n    }\r\n\r\n    fun sendSideEffect(effect: MainEffect) = viewModelScope.launch {\r\n        _sideEffects.emit(effect)\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/features/src/main/java/com/hyosik/features/ui/viewmodel/MainViewModel.kt b/features/src/main/java/com/hyosik/features/ui/viewmodel/MainViewModel.kt
--- a/features/src/main/java/com/hyosik/features/ui/viewmodel/MainViewModel.kt	(revision b61f9067691f0f2e7c9cc514282d07dcea8146fd)
+++ b/features/src/main/java/com/hyosik/features/ui/viewmodel/MainViewModel.kt	(date 1736428698534)
@@ -46,7 +46,7 @@
         )
         .stateIn(
             scope = viewModelScope,
-            started = SharingStarted.Eagerly,
+            started = SharingStarted.WhileSubscribed(100),
             initialValue = UiState<MainState>(
                 data =  MainState (
                 billboard = Billboard()
